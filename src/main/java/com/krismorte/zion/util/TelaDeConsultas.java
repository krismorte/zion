/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaDeConsultas.java
 *
 * Created on 11/02/2015, 17:44:20
 */
package com.krismorte.zion.util;

import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;

/**
 *
 * @author krismorte <krisnamourt_ti@hotmail.com>
 */
public class TelaDeConsultas extends javax.swing.JDialog {

    private static JPopupMenu menuFlutuante = new JPopupMenu();
    private static JMenuItem editar = new JMenuItem("editar");
    private static JMenuItem remover = new JMenuItem("remover");
    private static JTable tabela;
    private String[] colunas;
    private Object[][] linhas;

    /** Creates new form TelaDeConsultas */
    public TelaDeConsultas(java.awt.Frame parent, boolean modal, String titulo, String[] colunas, Object[][] linhas) {
        super(parent, modal);
        initComponents();
        this.setTitle(titulo);
        this.colunas = colunas;
        this.linhas = linhas;
        preencheBox();
        atualizaTabela(colunas, linhas);
    }

    public static void showQueryScreen(String titulo, String[] colunas, Object[][] linhas) {
        TelaDeConsultas tela = new TelaDeConsultas(null, true, titulo, colunas, linhas);
        tela.setVisible(true);
    }

    /*public static void showQueryScreen(String titulo, String[] colunas, Object[][] linhas,ActionListener removeAction) {
    TelaDeConsultas tela = new TelaDeConsultas(null, true, titulo, colunas, linhas);
    tela.setVisible(true);
    }*/
    public static void clearActions() {
        menuFlutuante.removeAll();
        menuFlutuante.setVisible(false);
    }

    public static void addRemoveAction(ActionListener removeAction) {
        remover.addActionListener(removeAction);
        menuFlutuante.add(remover);
        menuFlutuante.setVisible(true);
    }

    public static void addUpdateAction(ActionListener editAction) {
        editar.addActionListener(editAction);
        menuFlutuante.add(editar);
        menuFlutuante.setVisible(true);
    }

    public static void addGenericAction(String actionLabel, ActionListener genericAction) {
        JMenuItem generic = new JMenuItem(actionLabel);
        generic.addActionListener(genericAction);
        menuFlutuante.add(generic);
        menuFlutuante.setVisible(true);
    }

    public static String getColumnValueFromSelectedRow(int column) {
        return tabela.getValueAt(tabela.getSelectedRow(), column).toString();
    }

    public static String[] selectedRowToStringArray() {
        String[] row = new String[Tabela.colunas.length];
        for (int i = 0; i < row.length; i++) {
            row[i] = tabela.getValueAt(tabela.getSelectedRow(), i).toString();
        }
        return row;
    }

    /*private void carregaTela(int tipo) {
    if (tipo == SERVIDOR) {
    this.setTitle("Relatórios de Servidores");
    srvLista = new ServidorLista();
    for (String g : Servidor.listaGrupos()) {
    for (Servidor s : Servidor.lista(Servidor.DIRETORIO + "\\" + g).getList()) {
    s.setGrupo(g.replace(".xml", ""));
    srvLista.add(s);
    }
    }
    srvLista.preencheMatrizLinhas();
    atualizaTabelaPorObjeto(tipo);
    preencheBox(tipo);
    } else if (tipo == SCRIPT) {
    this.setTitle("Relatórios de Scripts");
    Script.preencheMatrizLinhas(Script.getListaDeScripts());
    atualizaTabelaPorObjeto(tipo);
    preencheBox(tipo);
    } else if (tipo == LOG) {
    this.setTitle("Log do sistema");
    //Main.logApp.
    atualizaTabelaPorObjeto(tipo);
    preencheBox(tipo);
    }
    }*/
    private void preencheBox() {
        for (String s : colunas) {
            boxColunas.addItem(s);
        }
    }

    private void atualizaTabela(String[] colunas, Object[][] linhas) {
        Tabela.preencheTabela(panelResultados, txtTotal, colunas, linhas);
        tabela = Tabela.table;
        tabela.addMouseListener(new EventoMouse());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        boxColunas = new javax.swing.JComboBox();
        txtFiltro = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        panelResultados = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Filtrar por:");

        jButton1.setText("buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panelResultados.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelResultadosLayout = new javax.swing.GroupLayout(panelResultados);
        panelResultados.setLayout(panelResultadosLayout);
        panelResultadosLayout.setHorizontalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 660, Short.MAX_VALUE)
        );
        panelResultadosLayout.setVerticalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );

        jLabel2.setText("Total:");

        txtTotal.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boxColunas, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(boxColunas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (tabela == null) {
            JOptionPane.showMessageDialog(null, "Sem Resultados");
        } else {
            if (txtFiltro.getText().equals("")) {
                atualizaTabela(this.colunas, this.linhas);
            } else {
                int col = boxColunas.getSelectedIndex();
                Object[][] linhasTmp = linhas;
                List<Object[]> novasLinhasLista = new ArrayList<Object[]>();
                for (Object[] o : linhasTmp) {
                    if (o[col].toString().toUpperCase().contains(txtFiltro.getText().toUpperCase())) {
                        novasLinhasLista.add(o);
                    }
                }
                Object[][] novasLinhas = new Object[novasLinhasLista.size()][colunas.length];
                int nLinha = 0;
                for (Object[] o : novasLinhasLista) {
                    for (int z = 0; z < colunas.length; z++) {
                        novasLinhas[nLinha][z] = o[z];
                    }
                    nLinha++;
                }
                atualizaTabela(colunas, novasLinhas);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                TelaDeConsultas dialog = new TelaDeConsultas(new javax.swing.JFrame(), true, "Tela de Consultas Gen[ericas", null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxColunas;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panelResultados;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void selecionaLinhaTabela() {
        tabela.setColumnSelectionInterval(0, colunas.length - 1);
        tabela.setRowSelectionInterval(tabela.getSelectedRow(), tabela.getSelectedRow());
    }

    public class EventoMouse implements MouseListener {

        public void mouseClicked(MouseEvent e) {

            if (e.getButton() == MouseEvent.BUTTON3) {
                selecionaLinhaTabela();
                menuFlutuante.show(e.getComponent(), e.getX(), e.getY());
            }
        }

        public void mousePressed(MouseEvent e) {
        }

        public void mouseReleased(MouseEvent e) {
        }

        public void mouseExited(MouseEvent e) {
        }

        public void mouseEntered(MouseEvent e) {
        }
    }
}
