/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author krismorte <krisnamourt_ti@hotmail.com>
 */
package com.krismorte.zion.view.subpanels;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import com.krismorte.zion.util.Tabela;
import com.krismorte.zion.view.operationPanel;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 *
 * @author krismorte <krisnamourt_ti@hotmail.com>
 */
public class listScriptPanel extends scriptPanel {

    private ResourceBundle resourceBundle = ResourceBundle.getBundle("SystemMessages", Locale.getDefault());
    private String[] colunas;
    private Object[][] linhas;
    public static int valorInicial;
    public static int valorSuc;
    public static int valorFal;
    private List<File> arquivos = new ArrayList<File>();

    /**
     * Creates new form panelScriptLivre
     */
    public listScriptPanel(operationPanel panel) {
        super(panel);
        initComponents();
        String[] colunasTMP = {resourceBundle.getString("ORDER"), resourceBundle.getString("STATUS")};
        colunas = colunasTMP;
        //txtParalelismo.setText("" + Parametros.parallelism);
        atualizaTabela();
    }

    /*public boolean verificaParalelismo() {
        try {
            int par = Integer.parseInt(txtParalelismo.getText());
            return Parametros.isValidParallelismValue(par);
        } catch (NumberFormatException e) {
            txtParalelismo.setText("" + Parametros.parallelism);
            return false;
        }
    }*/

   public String getParallelism() {
        return panel.getParallelism();
    }
/*
    public void setParalelismo(String script) {
        txtParalelismo.setText(script);
    }

    public void setAguardando(String script) {
        txtAguardando.setText(script);
    }

    public void setSucesso(String script) {
        txtSucesso.setText(script);
    }

    public void setFalha(String script) {
        txtFalha.setText(script);
    }*/

 public void iniciaContadores(int valorInicial, int valorSuc, int valorFal) {
        this.valorInicial = valorInicial;
        this.valorSuc = valorSuc;
        this.valorFal = valorFal;
        panel.setTotal("" + valorInicial);
        panel.setWainting("" + valorInicial);
        panel.setFail("" + valorFal);
        panel.setSuccess("" + valorSuc);
        //txtTotal.setText();
        //txtAguardando.setText();
        //txtFalha.setText("" + valorFal);
        //txtSucesso.setText("" + valorSuc);
    }

    public void atualizaContadorPositivo() {
        valorSuc++;
        valorInicial--;
        panel.setWainting("" + valorInicial);
        panel.setSuccess("" + valorSuc);
        //txtAguardando.setText("" + valorInicial);
        //txtFalha.setText("" + valorFal);
        //txtSucesso.setText("" + valorSuc);
    }

    public void atualizaContadorNegativo() {
        valorFal++;
        valorInicial--;
        //txtAguardando.setText("" + valorInicial);
        //txtFalha.setText("" + valorFal);
        panel.setWainting("" + valorInicial);
        panel.setFail("" + valorFal);
        // txtSucesso.setText("" + valorSuc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtArquivo = new javax.swing.JTextField();
        panelResultados = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText(resourceBundle.getString("SCRIPT")+":");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panelResultados.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout panelResultadosLayout = new javax.swing.GroupLayout(panelResultados);
        panelResultados.setLayout(panelResultadosLayout);
        panelResultadosLayout.setHorizontalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelResultadosLayout.setVerticalGroup(
            panelResultadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        jButton2.setText("remover arquivos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArquivo, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtArquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelResultados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        try {
//            JFileChooser fc = null;
//            String exts[] = {"TXT", "SQL"};
//            if (fc == null) {
//                fc = new JFileChooser();
//                fc.addChoosableFileFilter(new ArquivosFiltro(exts));
//                fc.setMultiSelectionEnabled(true);
//                fc.setDialogTitle("Procurar");
//            }
//            int returnVal = fc.showDialog(this, "Escolher");
//            if (returnVal == JFileChooser.APPROVE_OPTION) {
//                File[] arquivosTmp = fc.getSelectedFiles();
//                String caminhoArquivo = "";
//                if (arquivosTmp.length == 1) {
//                    caminhoArquivo = arquivosTmp[0].getAbsolutePath();
//                    arquivos.add(arquivosTmp[0]);
//                } else {
//                    for (int i = 0; i < arquivosTmp.length; i++) {
//                        if (i == 0) {
//                            caminhoArquivo += arquivosTmp[i].getName();
//                        } else {
//                            caminhoArquivo += ", " + arquivosTmp[i].getName();
//                        }
//                        arquivos.add(arquivosTmp[i]);
//                    }
//                }
//                atualizaTabela();
//                txtArquivo.setText(caminhoArquivo);
//            } else {
//            }
//            fc.setSelectedFile(null);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Falha na busca da imagem. " + e.getMessage());
//        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        arquivos.clear();
        atualizaTabela();
        txtArquivo.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelResultados;
    private javax.swing.JTextField txtArquivo;
    // End of variables declaration//GEN-END:variables

    private void atualizaTabela() {
        preencheMatrizLinhas();
        Tabela.preencheTabela(panelResultados, colunas, linhas);
    }

    public void preencheMatrizLinhas() {
        linhas = new Object[arquivos.size()][colunas.length];
        if (arquivos.size() > 0) {
            for (int i = 0; i < arquivos.size(); i++) {
                for (int z = 0; z < colunas.length; z++) {
                    Object[][] obj = {{i, arquivos.get(i).getAbsoluteFile()}};
                    linhas[i][z] = obj[0][z];//Rows are dynamics
                }
            }
        }
    }
}
